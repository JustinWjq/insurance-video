package com.txt.video.ui.videoimport android.content.Contextimport android.content.Intentimport android.graphics.Bitmapimport android.net.Uriimport android.os.Buildimport com.tencent.imsdk.TIMMessageimport com.tencent.mm.opensdk.modelmsg.SendMessageToWXimport com.tencent.mm.opensdk.modelmsg.WXMediaMessageimport com.tencent.mm.opensdk.modelmsg.WXMiniProgramObjectimport com.tencent.teduboard.TEduBoardControllerimport com.tencent.trtc.TRTCCloudimport com.tencent.trtc.TRTCCloudDefimport com.txt.video.Rimport com.txt.video.TXSdkimport com.txt.video.base.BasePresenterimport com.txt.video.base.constants.IMkeyimport com.txt.video.base.constants.VideoCodeimport com.txt.video.net.bean.RoomParamsBeanimport com.txt.video.net.http.HttpRequestClientimport com.txt.video.net.http.SystemHttpRequestimport com.txt.video.net.utils.TxLogUtilsimport com.txt.video.trtc.ConfigHelperimport com.txt.video.trtc.TICClassroomOptionimport com.txt.video.trtc.TICManagerimport com.txt.video.trtc.TRTCCloudManagerimport com.txt.video.trtc.remoteuser.RemoteUserConfigHelperimport com.txt.video.trtc.remoteuser.TRTCRemoteUserManagerimport com.txt.video.trtc.ticimpl.TICCallbackimport com.txt.video.trtc.ticimpl.TICMessageListenerimport com.txt.video.trtc.ticimpl.utils.MyBoardCallbackimport com.txt.video.trtc.videolayout.list.MemberEntityimport com.txt.video.common.utils.AndroidSystemUtilimport com.txt.video.common.utils.PermissionConstantsimport com.txt.video.common.utils.TxPermissionUtilsimport com.txt.video.net.utils.WxUtilimport com.txt.video.trtc.videolayout.list.MeetingVideoViewimport com.txt.video.ui.TXManagerImplimport org.json.JSONArrayimport org.json.JSONObjectimport kotlin.concurrent.thread/** * Created by JustinWjq * @date 2020/10/20. * description： */public class VideoPresenter(val context: Context, val activity: VideoActivity) :    BasePresenter<VideoContract.ICollectView>(), VideoContract.ICollectPresenter,    TICMessageListener {    private var service_id: String? = null    private var group_Id: String? = null    private var user_id: String? = null    private var agentName: String? = null    private var mMainUserId = "" //当前业务员Id    private var room_id = 0 //当前业务员Id    private var mMaxRoomUser = 0 //最大人数    private var mMaxRoomTime = 0 //最长时间    private var mInviteNumber = "" //邀请码    private var mIsOwner = false  //判断本人是什么角色    private var mSoundStatus = false  //静音状态（判断进入是否静音）    private var mShareStatus = false  //白板状态(非业务员需要根据这个状态显示出白板)    private var mShareUserId = ""  //显示白板展示的id    private var mShareWebId = ""  //显示同屏分享的用户Id    var isCloseVideo = false //保存当前视频开关的状态    var isSkipBoradPage = false //显示当前横竖屏切换    private var mMemberEntityList: ArrayList<MemberEntity>? = null    private var mStringMemberEntityMap: HashMap<String, MemberEntity>? = null    private var mAllMemberEntityList: ArrayList<MemberEntity>? = null    private var mAllMemberEntityMap: HashMap<String, MemberEntity>? = null    private var mTRTCParams: TRTCCloudDef.TRTCParams? = null // 进房参数    private val mIsCustomCaptureAndRender = false    private val mIsAudioEarpieceMode = false    private var mTRTCCloud: TRTCCloud? = null    private var mTRTCCloudManager: TRTCCloudManager? = null    private val mReceivedVideo = true    private val mReceivedAudio = true    private val mVolumeType = 2    private var mTRTCRemoteUserManager: TRTCRemoteUserManager? = null    //用来主要管理视频ui的数据    override fun getMemberEntityList(): ArrayList<MemberEntity> = mMemberEntityList!!    override fun getStringMemberEntityMap(): HashMap<String, MemberEntity> =        mStringMemberEntityMap!!    //用来主要管理会议成员的数据    override fun getAllMemberEntityList(): ArrayList<MemberEntity> = mAllMemberEntityList!!    override fun getAllMemberEntityMap(): HashMap<String, MemberEntity> =        mAllMemberEntityMap!!    override fun getRoomId(): Int = room_id!!    override fun getServiceId(): String = service_id!!    override fun getAgentId(): String = user_id!!    override fun getGroupId(): String = group_Id!!    override fun getMaxRoomUser(): Int = mMaxRoomUser    override fun getMaxRoomTime(): Int = mMaxRoomTime    override fun getInviteNumber(): String = mInviteNumber    public var mMinBmp: Bitmap? = null    override fun initMemberData() {        TxLogUtils.i("initMemberData")        mStringMemberEntityMap = HashMap()        mMemberEntityList = ArrayList()        mAllMemberEntityMap = HashMap()        mAllMemberEntityList = ArrayList()        //创建自己的 MemberEntity        val entity = MemberEntity()//        val mMeetingVideoView = V2TRTCVideoLayout(context)        val mMeetingVideoView = MeetingVideoView(context)        mMeetingVideoView.apply {            isSelfView = true            meetingUserId = mTRTCParams?.userId            isNeedAttach = true        }//        val enableVideo = TXManagerImpl.instance?.getRoomControlConfig()?.isEnableVideo        ConfigHelper.getInstance().videoConfig.isEnableVideo = defaultBlind!!        entity.apply {            meetingVideoView = mMeetingVideoView            isShowAudioEvaluation = defaultMute            isAudioAvailable = defaultMute            isVideoAvailable = true            isMuteAudio = !defaultMute            isMuteVideo = defaultBlind            userId = mTRTCParams?.userId            userName = mRoomParamsBean?.agentName            isHost = mIsOwner            userRole = ""            userRoleIconPath = ""        }        addMemberEntity(entity)        addToAllMemberEntity(entity)        thread {            mMinBmp =                WxUtil.getHtmlByteArray(TXSdk.getInstance().txConfig.miniprogramCardURL)        }    }    /**     * 不包含大屏幕的数据     */    override fun addMemberEntity(entity: MemberEntity) {        mMemberEntityList?.add(entity)        mStringMemberEntityMap?.put(entity.userId, entity)    }    override fun addToAllMemberEntity(entity: MemberEntity) {        mAllMemberEntityList?.add(entity)        mAllMemberEntityMap?.put(entity.userId, entity)    }    override fun addMemberEntity(positon: Int, entity: MemberEntity) {        mMemberEntityList?.add(positon, entity)        mStringMemberEntityMap?.put(entity.userId, entity)    }    override fun removeForAllMemberEntity(userId: String): Int {        val entity = mAllMemberEntityMap?.remove(userId)        if (entity != null) {            val i = mAllMemberEntityList!!.indexOf(entity)            if (i >= 0) {                mAllMemberEntityList?.remove(entity)            } else {                return -1            }            return i        }        return -1    }    override fun removeMemberEntity(userId: String): Int {        val entity = mStringMemberEntityMap?.remove(userId)        if (entity != null) {            val i = mMemberEntityList!!.indexOf(entity)            if (i >= 0) {                mMemberEntityList?.remove(entity)            } else {                return -1            }            return i        }        return -1    }    override fun getTRTCParams(): TRTCCloudDef.TRTCParams {        return mTRTCParams!!    }    var defaultBlind = false;    var defaultMute = false;    private var mRoomParamsBean: RoomParamsBean? = null    override fun setTRTCParams(stringExtra: RoomParamsBean) {        this.mRoomParamsBean = stringExtra        room_id = stringExtra.roomId        service_id = stringExtra.serviceId        user_id = stringExtra.userId        group_Id = stringExtra.groupId        mMaxRoomTime = stringExtra.maxRoomTime        mMaxRoomUser = stringExtra.maxRoomUser        mInviteNumber = stringExtra.inviteNumber        mIsOwner = "owner" == stringExtra.userRole        val trtcParams = TRTCCloudDef.TRTCParams().apply {            sdkAppId = stringExtra.sdkAppId            userId = stringExtra.userId            roomId = stringExtra.roomId            userSig = stringExtra.userSig            role = TRTCCloudDef.TRTCRoleAnchor        }        this.mTRTCParams = trtcParams        //进入房间后        //----视频相关逻辑        //如果当前是非业务员，业务员就要显示大屏幕        //如果是业务员，保持原来的逻辑        //----非参会人 业务相关逻辑        //白板状态，进来先显示白板        //投屏状态，进来就显示大屏幕        SystemHttpRequest.getInstance()            .getRoomInfo(                getServiceId(),                object : HttpRequestClient.RequestHttpCallBack {                    override fun onSuccess(json: String?) {                        activity.runOnUiThread {                            val jsonObject = JSONObject(json)                            //静音状态（判断进入是否静音）                            val soundStatus = jsonObject.optBoolean("soundStatus")                            mSoundStatus = soundStatus                            //白板状态(非业务员需要根据这个状态显示出白板)                            val shareStatus = jsonObject.optBoolean("shareStatus")                            mShareStatus = shareStatus                            mShareUserId = jsonObject.optString("shareUserId", "")                            val roomInfo = jsonObject.optJSONObject("roomInfo")                            val bgImage = roomInfo.optString("bgImage")                            defaultBlind = roomInfo.optBoolean("defaultBlind") //房间代理人视频状态                            defaultMute = roomInfo.optBoolean("defaultMute") //房间代理人音频状态                            initMemberData()                            initVideoSDK()                            initTICManager()                            view.initViews()                            enterRoom()                            startLocalPreview(getMemberEntityList()[0].meetingVideoView!!)                            loginImRoom()                            view.startTimer()                            //获取房间信息                            val jsonArray = jsonObject.getJSONArray("userInfo")                            view.showBg(bgImage)                            for (i in 0..jsonArray.length()) {                                //获取房间人员的信息                                val personJb = jsonArray.getJSONObject(i)                                val personUserId = personJb.optString("userId")                                val userRoleStr = personJb.optString("userRole")                                //判断app自己                                TxLogUtils.i("展示webdialog" + getSelfUserId())                                val memberEntity = getMemberEntityList()[0]                                if (personUserId == getSelfUserId()) {                                    //assistant 业务员字段                                    var userRoleIconPathStr = ""                                    if (userRoleStr == "owner" || userRoleStr == "assistant") {                                        userRoleIconPathStr = personJb.optString("userIcon")                                    } else {                                        userRoleIconPathStr = ""                                    }                                    //刷新自己                                    memberEntity.userRole = userRoleStr                                    memberEntity.userRoleIconPath = userRoleIconPathStr                                    memberEntity.userName = personJb.optString("userName")//                                    memberEntity.bgUrl = bgImage                                    TXSdk.getInstance().agentName = personJb.optString("userName")                                    view.getRoomInfoSuccess(                                        json,                                        personUserId,                                        TRTCCloudDef.TRTC_VIDEO_STREAM_TYPE_BIG,                                        memberEntity,                                        true,                                        false                                    )                                    return@runOnUiThread                                }                            }                        }                    }                    override fun onFail(err: String?, code: Int) {                    }                })    }    override fun startRecord() {        SystemHttpRequest.getInstance()            .startRecord(getServiceId(), object : HttpRequestClient.RequestHttpCallBack {                override fun onSuccess(json: String?) {                }                override fun onFail(err: String?, code: Int) {                }            })    }    override fun endRecord() {        if (isOwner()) {            SystemHttpRequest.getInstance()                .endRecord(getServiceId(), object : HttpRequestClient.RequestHttpCallBack {                    override fun onSuccess(json: String?) {                    }                    override fun onFail(err: String?, code: Int) {                    }                })        } else {            endUser()        }    }    override fun initVideoSDK() {        val videoConfig = ConfigHelper.getInstance().videoConfig        val audioConfig = ConfigHelper.getInstance().audioConfig        audioConfig.apply {            isEnableAudio = true            isAudioEarpieceMode = mIsAudioEarpieceMode        }        videoConfig.apply {            isEnableVideo = true            isPublishVideo = true            isVideoFillMode = true            isEnableGSensorMode = true            isCurIsMix = false        }        mTRTCCloud = TRTCCloud.sharedInstance(context)        mTRTCCloudManager = TRTCCloudManager.sharedInstance()        mTRTCCloudManager?.init(context, mTRTCCloud, getTRTCParams(), 0)        mTRTCCloudManager?.apply {            setViewListener(activity)            setTRTCListener(activity)            initTRTCManager(false, mReceivedVideo, mReceivedAudio)            setSystemVolumeType(mVolumeType)        }        view.autoCheckAudioHand()        mTRTCRemoteUserManager =            TRTCRemoteUserManager(mTRTCCloud, activity, mIsCustomCaptureAndRender)        mTRTCRemoteUserManager?.setMixUserId(getTRTCParams().userId)    }    override fun enterRoom() {        mTRTCCloudManager?.setSystemVolumeType(mVolumeType)        mTRTCCloudManager!!.enterRoom()    }    override fun loginImRoom() {        TxLogUtils.i("txsdk---loginImRoom---${getTRTCParams()?.userId}----${getTRTCParams()?.userSig}")        mTicManager?.login(getTRTCParams().userId,            getTRTCParams().userSig, object : TICCallback<Any> {                override fun onSuccess(data: Any?) {                    TxLogUtils.i("txsdk---im_login: onSuccess---$data")                    view.joinClassroom()                }                override fun onError(module: String?, errCode: Int, errMsg: String?) {                    TxLogUtils.i("txsdk---im_login: onError---$errCode----$errMsg")                    view.showMessage(errMsg!!)                }            })    }    override fun logoutClassRoom() {        mTicManager?.logout(object : TICCallback<Any> {            override fun onSuccess(data: Any?) {            }            override fun onError(module: String?, errCode: Int, errMsg: String?) {            }        })    }    private var mTicManager: TICManager? = null    override fun initTICManager() {        mTicManager = TICManager.getInstance()        mTicManager?.init(            activity, getTRTCParams().sdkAppId,            TICManager.TICDisableModule.TIC_DISABLE_MODULE_TRTC        )        view.initBoard()        mTicManager?.addIMMessageListener(this)    }    override fun joinClassroom(mBoardCallback: MyBoardCallback?) {        //2、如果用户希望白板显示出来时，不使用系统默认的参数，就需要设置特性缺省参数，如是使用默认参数，则填null。        val initParam = TEduBoardController.TEduBoardInitParam()        initParam.brushColor = TEduBoardController.TEduBoardColor(255, 0, 0, 255)        initParam.smoothLevel = 0f //用于指定笔迹平滑级别，默认值0.1，取值[0, 1]        val classroomOption = TICClassroomOption()        classroomOption.apply {            classId = getTRTCParams().roomId            boardInitPara = initParam        }        mTicManager?.joinClassroom(classroomOption, object : TICCallback<String> {            override fun onSuccess(data: String?) {                TxLogUtils.i("txsdk---joinClassroom:onSuccess---$data")//                joinClass()                if (mShareStatus) {                    view.showBroad()                }            }            override fun onError(module: String?, errCode: Int, errMsg: String?) {                TxLogUtils.i("txsdk---joinClassroom:onError---$errCode----$errMsg")            }        })    }    override fun startLocalPreview(viewVideo: MeetingVideoView) {        view.processSelfVideoPlay()        // 开始采集声音        mTRTCCloudManager!!.startLocalAudio()        // 开启本地预览        mTRTCCloudManager!!.setLocalPreviewView(viewVideo.localPreviewView)        mTRTCCloudManager!!.startLocalPreview()        mTRTCCloudManager!!.setVideoFillMode(false)    }    override fun stopLocalPreview() {        // 关闭本地预览        mTRTCCloudManager!!.stopLocalPreview()    }    /**     * 退房     */    override fun exitRoom() {        isSkipBoradPage = false        clearMember()        stopLocalPreview()        RemoteUserConfigHelper.getInstance().clear()        getTicManager().unInit()        getTRTCCloudManager().destroy()        getTRTCRemoteUserManager().destroy()        // 退房设置为非录制状态        ConfigHelper.getInstance().audioConfig.isRecording = false        mTRTCCloudManager!!.exitRoom()    }    //开始屏幕分享    override fun startScreenCapture() {        val encParams = TRTCCloudDef.TRTCVideoEncParam()        encParams.apply {            videoResolution = TRTCCloudDef.TRTC_VIDEO_RESOLUTION_1280_720            videoResolutionMode = TRTCCloudDef.TRTC_VIDEO_RESOLUTION_MODE_PORTRAIT            videoFps = 10            enableAdjustRes = false            videoBitrate = 1200        }        val params = TRTCCloudDef.TRTCScreenShareParams()        mTRTCCloudManager?.stopLocalPreview()        mTRTCCloudManager?.startScreenCapture(encParams, params)    }    //停止屏幕分享    override fun stopScreenCapture() {        mTRTCCloudManager?.stopScreenCapture()        mTRTCCloudManager?.startLocalPreview()    }    override fun getTRTCCloudManager(): TRTCCloudManager = mTRTCCloudManager!!    override fun getTRTCRemoteUserManager(): TRTCRemoteUserManager = mTRTCRemoteUserManager!!    override fun getTicManager(): TICManager = mTicManager!!    override fun sendGroupMessage(msg: String, type: String) {        mTicManager!!.sendGroupTextMessage(msg, object : TICCallback<Any> {            override fun onSuccess(data: Any) {                TxLogUtils.i("txsdk---sendGroupTextMessage:onSuccess------$data")                if (type == "1") {                    view.sendIMSuccess()                }            }            override fun onError(module: String?, errCode: Int, errMsg: String?) {                TxLogUtils.i("txsdk---sendGroupTextMessage:onError------$errCode---$errMsg")                if (type == "1") {                    view.sendIMSuccess()                }            }        })    }    override fun update() {        SystemHttpRequest.getInstance()            .getFileLists(                TXSdk.getInstance().agent,                object : HttpRequestClient.RequestHttpCallBack {                    override fun onSuccess(json: String?) {                        //获取到文件列表                        view.updateAdapter(json!!)                    }                    override fun onFail(err: String?, code: Int) {                        TxLogUtils.i("txsdk---getAgent:onFail---$err---$code")                    }                })    }    override fun uploadFile(data1: Uri?) {        TxLogUtils.i("txsdk---uploadFile---$data1")        SystemHttpRequest.getInstance().uploadLogFile(data1, TXSdk.getInstance().agent,            { size, time ->            }, object :                SystemHttpRequest.onRequestCallBack {                override fun onSuccess() {                    view.uploadFileSuccess()                }                override fun onFail(msg: String?) {                    view.uploadFileFail(msg!!)                }            },            { totalLength, currentLength ->            }        )    }    override fun requestWX() {        val jsonObject = JSONObject()        jsonObject.apply {            put("title", "智慧展业")            put("version", TXSdk.getInstance().sdkVersion)            put("terminal", TXSdk.getInstance().terminal)        }        val webpage = WXMiniProgramObject().apply {            webpageUrl = "http://www.qq.com"            miniprogramType = when (TXSdk.getInstance().txConfig.miniprogramType) {                TXSdk.Environment.DEV -> {                    WXMiniProgramObject.MINIPROGRAM_TYPE_TEST                }                TXSdk.Environment.TEST -> {                    WXMiniProgramObject.MINIPROGRAM_TYPE_PREVIEW                }                TXSdk.Environment.RELEASE -> {                    WXMiniProgramObject.MINIPTOGRAM_TYPE_RELEASE                }            }            userName = TXSdk.getInstance().txConfig.userName            path =                "${TXSdk.getInstance().txConfig.miniProgramPath}" +                        "?serviceId=${getServiceId()}" +                        "&agentId=${getAgentId()}" +                        "&inviteNumber=${getInviteNumber()}" +                        "${TXSdk.getInstance().userNickname}"        }        TxLogUtils.i("webpage", webpage.path)        val msg = WXMediaMessage(webpage).apply {            title = if (TXSdk.getInstance().txConfig.miniprogramTitle.isNotEmpty()) {                TXSdk.getInstance().txConfig.miniprogramTitle            } else {                context.getString(R.string.tx_share_text)            }            description = if (TXSdk.getInstance().txConfig.miniprogramDescription.isNotEmpty()) {                TXSdk.getInstance().txConfig.miniprogramDescription            } else {                context.getString(R.string.tx_share_text)            }            setThumbImage(mMinBmp)        }        TXSdk.getInstance().wxTransaction = "miniProgram${System.currentTimeMillis()}"        val req = SendMessageToWX.Req().apply {            transaction = TXSdk.getInstance().wxTransaction            message = msg            scene = SendMessageToWX.Req.WXSceneSession        }        view.sendReq(req)    }    override fun startShare() {    }    override fun setShareStatus(        isShareStatus: Boolean,        url: String?,        images: MutableList<String>?,        needCallBack: Boolean    ) {        SystemHttpRequest.getInstance()            .shareStatus(                getServiceId(),                getSelfUserId(),                isShareStatus,                object : HttpRequestClient.RequestHttpCallBack {                    override fun onSuccess(json: String?) {                        activity?.runOnUiThread {                            if (needCallBack) {                                view.startShareSuccess(isShareStatus, url, images)                            }                        }                    }                    override fun onFail(err: String?, code: Int) {                        activity?.runOnUiThread {                            view.startShareFail(isShareStatus)                        }                    }                })    }    override fun setSoundStatus(screenStatus: Boolean) {        SystemHttpRequest.getInstance()            .soundStatus(                getServiceId(),                screenStatus,                object : HttpRequestClient.RequestHttpCallBack {                    override fun onSuccess(json: String?) {                        view.startSoundSuccess()                    }                    override fun onFail(err: String?, code: Int) {                        view.startSoundFail()                    }                })    }    override fun requestPermission() {        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {            TxLogUtils.i("AndroidSystemUtil.getDevice()", AndroidSystemUtil.getDevice())            if (!TxPermissionUtils.isGrantedDrawOverlays()) {                TxLogUtils.i("需要打开悬浮窗权限")                TxPermissionUtils.requestDrawOverlays(object :                    TxPermissionUtils.SimpleCallback {                    override fun onGranted() {                        startScreenCapture()                    }                    override fun onDenied() {                        view.showMessage(context.getString(R.string.tx_str_screen))                        view.onPermissionDenied()                    }                })            } else {                TxLogUtils.i("startScreenCapture")                startScreenCapture()            }        } else {            TxLogUtils.i("startScreenCapture")            startScreenCapture()        }    }    override fun setScreenStatus(screenStatus: Boolean) {        SystemHttpRequest.getInstance()            .screenStatus(                getServiceId(),                getSelfUserId(),                screenStatus,                object : HttpRequestClient.RequestHttpCallBack {                    override fun onSuccess(json: String?) {                        activity?.runOnUiThread {                            view.setScreenStatusSuccess(screenStatus)                        }                    }                    override fun onFail(err: String?, code: Int) {                        activity?.runOnUiThread {                            view.setScreenStatusFail(screenStatus)                        }                    }                })    }    override fun deleteFile(id: String?) {        SystemHttpRequest.getInstance()            .deleteFile(                id,                TXSdk.getInstance().agent,                object : HttpRequestClient.RequestHttpCallBack {                    override fun onSuccess(json: String?) {                        update()                    }                    override fun onFail(err: String?, code: Int) {                    }                })    }    //获取房间相关状态，然后再进入房间    override fun getRoomInfo(        userId: String,        streamType: Int,        available: Boolean,        entity: MemberEntity?,        isBigScreen: Boolean    ) {        SystemHttpRequest.getInstance()            .getRoomInfo(                getServiceId(),                object : HttpRequestClient.RequestHttpCallBack {                    override fun onSuccess(json: String?) {                        val jsonObject = JSONObject(json)                        //获取房间信息                        val jsonArray = jsonObject.getJSONArray("userInfo")                        for (i in 0..jsonArray.length()) {                            //获取房间人员的信息                            val personJb = jsonArray.getJSONObject(i)                            val personUserId = personJb.optString("userId")                            val userName = personJb.optString("userName")                            val userHead = personJb.optString("userHead")                            val userRoleStr = personJb.optString("userRole")                            //判断app自己                            TxLogUtils.i("展示webdialog" + getSelfUserId())                            if (personUserId == getSelfUserId()) {                                //选择分享给用户的id                                val shareWebId = personJb.optString("shareWebId", "")                                val shareWebUrl = personJb.optString("shareWebUrl", "")                                //需要显示的weburl                                if (shareWebId.isNotEmpty()) {                                    val otherShareWebUser =                                        personJb.optJSONArray("otherShareWebUser")                                    val shareWebRole = personJb.optString("shareWebRole")                                    val shareWebName = personJb.optString("shareWebName")                                    // 发起方 fromUser 接受方 toUser                                    val fromAgent = if (shareWebRole.isNotEmpty()) {                                        "fromUser" == shareWebRole                                    } else {                                        true                                    }                                    if (otherShareWebUser.length() > 0) {                                        val userId = otherShareWebUser.getString(0)                                        setShareWebId(shareWebId)                                        activity.runOnUiThread {                                            var toUserId = ""                                            var fromUserId = ""                                            if (fromAgent) {                                                //发送者                                                toUserId = userId                                                fromUserId = personUserId                                            } else {                                                //接受者                                                toUserId = personUserId                                                fromUserId = userId                                            }                                            //todo                                            view.showWebDialog(                                                shareWebUrl,                                                userId,                                                shareWebId,                                                fromAgent,                                                shareWebName,                                                toUserId,                                                fromUserId,                                                ""                                            )                                        }                                    }                                }                            }                            //找到对应的人员                            if (userId == personUserId) {                                if (entity != null) {                                    val isOwner = userRoleStr == "owner"                                    if (isOwner) {                                        mOwnerUserId = personUserId                                    }                                    entity.isHost = isOwner                                    entity.userName = userName                                    entity.userRole = userRoleStr                                    entity.userHead = userHead                                    //assistant 业务员字段                                    if (userRoleStr == "owner" || userRoleStr == "assistant") {                                        entity.userRoleIconPath = personJb.optString("userIcon")                                    } else {                                        entity.userRoleIconPath = ""                                    }                                    view.showMessage(userName + "进入会议室")                                    //显示对应的用户视图                                    view.getRoomInfoSuccess(                                        json,                                        userId,                                        streamType,                                        entity,                                        available,                                        isBigScreen                                    )                                }                                return                            }                        }                    }                    override fun onFail(err: String?, code: Int) {                        TxLogUtils.i("onFail" + err)                        //失败重新请求一次                    }                })    }    private var mVisibleVideoStreams: ArrayList<MemberEntity>? = null    /**     * 处理页面中需要展示的item     * 如果滑动到新的页面，旧的页面所有item需要停止播放     * 新的页面根据是否打开了video来判断需要播放页面     *     * @param fromItem     * @param toItem     */    override fun processVideoPlay(fromItem: Int, toItem: Int) {        val oldUserIds: MutableList<String> =            java.util.ArrayList()        val newUserIds: MutableList<String> =            java.util.ArrayList()        val needStopIds: MutableList<String> =            java.util.ArrayList()        val newVisibleStream = ArrayList<MemberEntity>()        if (mVisibleVideoStreams == null) {            mVisibleVideoStreams = ArrayList<MemberEntity>()        }        for (i in fromItem..toItem) {            newUserIds.add(getMemberEntityList()!![i].userId)            newVisibleStream.add(getMemberEntityList()!![i])        }        for (entity in mVisibleVideoStreams!!) {            oldUserIds.add(entity.userId)            if (!newUserIds.contains(entity.userId)) {                needStopIds.add(entity.userId)            }        }        for (entity in newVisibleStream) {            if (entity.isShowOutSide) {                continue            }            val meetingVideoView = entity.meetingVideoView            meetingVideoView.refreshParent()            if (entity.isNeedFresh) {                entity.isNeedFresh = false                if (!entity.isMuteVideo && entity.isVideoAvailable) {                    meetingVideoView.isPlaying = true                    getTRTCRemoteUserManager().remoteUserVideoAvailable(                        entity.userId,                        entity.userName,                        TRTCCloudDef.TRTC_VIDEO_STREAM_TYPE_BIG,                        entity.meetingVideoView.playVideoView,                        false                    )                } else {                    if (meetingVideoView.isPlaying) {                        meetingVideoView.isPlaying = false                        getTRTCRemoteUserManager().remoteUserVideoUnavailable(                            entity.userId,                            TRTCCloudDef.TRTC_VIDEO_STREAM_TYPE_BIG                        )                    }                }                continue            }            if (!oldUserIds.contains(entity.userId)) {                if (!entity.isMuteVideo && entity.isVideoAvailable) {                    if (!meetingVideoView.isPlaying) {                        meetingVideoView.isPlaying = true                        getTRTCRemoteUserManager().remoteUserVideoAvailable(                            entity.userId,                            entity.userName,                            TRTCCloudDef.TRTC_VIDEO_STREAM_TYPE_BIG,                            entity.meetingVideoView.playVideoView,                            false                        )                        meetingVideoView.refreshParent()                    }                } else {                    if (meetingVideoView.isPlaying) {                        meetingVideoView.isPlaying = false                        getTRTCRemoteUserManager().remoteUserVideoUnavailable(                            entity.userId,                            TRTCCloudDef.TRTC_VIDEO_STREAM_TYPE_BIG                        )                    }                }            } else {                if (entity.isMuteVideo || !entity.isVideoAvailable) {                    if (meetingVideoView.isPlaying) {                        meetingVideoView.isPlaying = false                        getTRTCRemoteUserManager()?.remoteUserVideoUnavailable(                            entity.userId,                            TRTCCloudDef.TRTC_VIDEO_STREAM_TYPE_BIG                        )                    }                }            }        }        for (id in needStopIds) {            val entity = getStringMemberEntityMap()!![id]            entity?.meetingVideoView?.setPlayingWithoutSetVisible(false)            getTRTCRemoteUserManager().remoteUserVideoUnavailable(                entity?.userId,                TRTCCloudDef.TRTC_VIDEO_STREAM_TYPE_BIG            )        }        mVisibleVideoStreams = newVisibleStream!!    }    override fun setIMTextData(type: String): JSONObject = JSONObject().apply {        put("serviceId", getServiceId())        put("type", type)        put("agentId", getAgentId())    }    override fun extendTime() {        SystemHttpRequest.getInstance()            .extendTime(                getServiceId(),                object : HttpRequestClient.RequestHttpCallBack {                    override fun onSuccess(json: String?) {                        view.showSuccess()                    }                    override fun onFail(err: String?, code: Int) {                        view.showFail()                    }                })    }    override fun sendMsg() {        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {            TxPermissionUtils.permission(                PermissionConstants.SMS            ).callback(object :                TxPermissionUtils.FullCallback {                override fun onGranted(permissionsGranted: List<String>) {                    //发送短信                    view.sendSystemMSG()                }                override fun onDenied(                    permissionsDeniedForever: List<String>,                    permissionsDenied: List<String>                ) {                    view.showMessage("发送短信，权限被拒绝")                }            }            ).request()        } else {            view.sendSystemMSG()        }    }    override fun clearMember() {        mMemberEntityList?.clear()        mStringMemberEntityMap?.clear()        mAllMemberEntityList?.clear()        mAllMemberEntityMap?.clear()    }    override fun chooseFile(isChooseFile: Boolean) {        TxPermissionUtils.permission(            PermissionConstants.STORAGE        ).callback(object : TxPermissionUtils.FullCallback {            override fun onGranted(permissionsGranted: MutableList<String>?) {                if (isChooseFile) {                    val intent = Intent(Intent.ACTION_GET_CONTENT).apply {                        addCategory(Intent.CATEGORY_OPENABLE)                        type = "*/*"                    }                    activity.startActivityForResult(intent, VideoCode.FILE_CODE)                } else {                    val intent = Intent()                    intent.action = Intent.ACTION_PICK                    intent.type = "image/*"                    activity.startActivityForResult(intent, VideoCode.PHOTO_CODE)                }            }            override fun onDenied(                permissionsDeniedForever: MutableList<String>?,                permissionsDenied: MutableList<String>?            ) {                view.showMessage("权限被拒绝")            }        }).request()    }    override fun setAllVideoStatusMemberToJSON(isVideoType: Boolean, isMute: Boolean): JSONArray {        val jsonArray = JSONArray()        val memberEntityList = getAllMemberEntityList()        memberEntityList.forEach {            jsonArray.put(JSONObject().apply {                put(IMkey.USERID, it.userId)                if (isVideoType) {                    put(IMkey.MUTEVIDEO, isMute)                } else {                    put(IMkey.MUTEAUDIO, isMute)                }            })        }        return jsonArray    }    override fun setMuteVideoMemberToJSON(isVideoType: Boolean, usedId: String): JSONArray {        val memberEntityList = getAllMemberEntityList()        val jsonArray = JSONArray()        memberEntityList.forEach {            if (it.userId == usedId) {                jsonArray.put(JSONObject().apply {                    put(IMkey.USERID, it.userId)                    if (isVideoType) {                        put(IMkey.MUTEVIDEO, !it.isMuteVideo)                    } else {                        put(IMkey.MUTEAUDIO, !it.isMuteAudio)                    }                })            } else {                jsonArray.put(JSONObject().apply {                    put(IMkey.USERID, it.userId)                    if (isVideoType) {                        put(IMkey.MUTEVIDEO, it.isMuteVideo)                    } else {                        put(IMkey.MUTEAUDIO, it.isMuteAudio)                    }                })            }        }        return jsonArray    }    override fun detachView() {        super.detachView()        mTicManager?.removeIMMessageListener(this)    }    override fun onTICRecvTextMessage(fromUserId: String?, text: String?) {    }    override fun onTICRecvMessage(message: TIMMessage?) {    }//    var mCurrentArrowCount = 0    override fun setCurrentArrowCount(currntArrowCount: Int) {//        mCurrentArrowCount = currntArrowCount    }    override fun onTICRecvGroupTextMessage(fromUserId: String?, text: String?) {        TxLogUtils.i("onTICRecvGroupTextMessage" + text)        if (isSkipBoradPage) return        val jsonObject = JSONObject(text)        val hasType = jsonObject.has("type")        if (hasType) {            val type = jsonObject.getString("type")            val hasData = jsonObject.has("data")            when (type) {//                IMkey.NOTIFYEXTEND -> {//                    if (hasData) {//                        if (isOwner()) {//                            val dataJO = jsonObject.getJSONObject("data")//                            val extendRoomTime = dataJO.getInt("extendRoomTime")//                            val notifyExtendTime = dataJO.getInt("notifyExtendTime")//                            view.showTimerDialog("2", 0, extendRoomTime, notifyExtendTime, 0)//                        }//                    }////                }//                IMkey.NOTIFYEND -> {//                    if (hasData) {//                        if (isOwner()) {//                            val dataJO = jsonObject.getJSONObject("data")//                            val extendRoomTime = dataJO.getInt("extendRoomTime")//                            val notifyEndTime = dataJO.getInt("notifyEndTime")//                            view.showTimerDialog("3", 0, extendRoomTime, 0, notifyEndTime)//                        }//                    }//                }                // end 关闭视频                IMkey.END -> {                    destroyRoom()                }                //显示白板                IMkey.SHAREWHITEBOARD -> {                    if (isSkipBoradPage || mShareStatus) return                    mShareStatus = true                    view.showPersonWhiteBroad(true)                }                //隐藏白板                IMkey.ENDWHITEBOARD -> {//                    if (isSkipBoradPage) return                    mShareStatus = false                    view.showPersonWhiteBroad(false)                }                IMkey.MUTEAUDIO -> {                    //非业务员，需要处理                    judgeMuteVideoOrAudioForSomeone(false, jsonObject)                }                IMkey.MUTEVIDEO -> {                    judgeMuteVideoOrAudioForSomeone(true, jsonObject)                }                IMkey.NOTIFYREFUSED -> {                    if (isSkipBoradPage) return                    if (hasData) {                        val dataJO = jsonObject.getJSONObject("data")                        val userName = dataJO.getString("userName")                        val inviteAccount = dataJO.getString("inviteAccount")                        if (inviteAccount == getSelfUserId()) {                            view.showMessage("${userName}拒绝了您的邀请,请稍后再试")                        }                    }                }                IMkey.WXPUSHWEBFILESUCCESS -> {                    val userId = jsonObject.getString(IMkey.USERID)                    if (getSelfUserId() == userId) {                        view.showMessage("推送成功")                    }                }                IMkey.WXPUSHWEBFILE -> { //收到推送的链接                    val hasType = jsonObject.has(IMkey.WEBURL)                    if (hasType) {                        val clientUrl = jsonObject.getString(IMkey.WEBURL)                        val webId = jsonObject.getString(IMkey.WEBID)                        val userId = jsonObject.getString(IMkey.USERID)                        val fileNameStr = jsonObject.getString(IMkey.FILENAME)                        val fromId = jsonObject.getString(IMkey.FROMID)//                        if (getSelfUserId() == userId) {//                            view.showWebDialog(//                                clientUrl, userId, webId, fromAgent = false,//                                fileName = fileNameStr, toUserId = "", fromUserId = fromId, cookie = cookie//                            )//                        }                    }                }                IMkey.WXSHAREWEBFILEEND -> { //小程序点击关闭投屏                    try {                        val toUserid = jsonObject.optString(IMkey.TOUSERID)                        val fromUserid = jsonObject.optString(IMkey.FROMUSERID)                        //如果是接受的userid，就显示出来                        if (getSelfUserId() == toUserid) {                            view.showMessage("对方已结束产品共享")                            view.hideWebDialog()                        } else if (getSelfUserId() == fromUserid) { //发送者                            stopShareWeb(fromUserid, getShareWebId(), getServiceId(), false)                            view.showMessage("对方已结束产品共享")                            view.hideWebDialog()                        }                    }catch (e:Exception){                    }                }                IMkey.WXSHAREWEBFILE -> { //显示同屏的链接                    val hasType = jsonObject.has(IMkey.WEBURL)                    if (hasType) {                        val clientUrl = jsonObject.getString(IMkey.WEBURL)                        val webId = jsonObject.getString(IMkey.WEBID)                        val userId = jsonObject.getString(IMkey.USERID)                        val fromId = jsonObject.getString(IMkey.FROMID)                        val fileName = jsonObject.getString(IMkey.FILENAME)                        //如果是接受的userid，就显示出来//                        if (getSelfUserId() == userId) {//                            view.showWebDialog(//                                clientUrl, fromId, webId, fromAgent = false,//                                fileName = fileName, toUserId = userId, fromUserId = fromId, cookie = cookie//                            )//                        }                    }                }                IMkey.agreeStartRecord -> {                    //用客户点击同意录制，所有客户点击同意，就可以直接开始录制                    //判断//                    mCurrentArrowCount++//                    if (mCurrentArrowCount == (mMemberEntityList?.size?.minus(1))) {//                    }//                    view.allowstartrecord()                }                IMkey.refuseStartRecord -> {                    //用客户点击拒绝//                    mCurrentArrowCount = 0                    view.refuseStartRecord()                }                IMkey.STARTRECORD -> {                    //点击同意                    view.allowstartrecord()                }                else -> {                }            }        }    }    override fun muteLocalVideo(enableVideo: Boolean) {        val videoConfig = ConfigHelper.getInstance().videoConfig        videoConfig.isEnableVideo = !enableVideo        mTRTCCloudManager!!.muteLocalVideo(enableVideo)    }    override fun muteLocalAudio(enableAudio: Boolean) {        val audioConfig = ConfigHelper.getInstance().audioConfig        audioConfig.isEnableAudio = !enableAudio        mTRTCCloudManager!!.muteLocalAudio(enableAudio)        //todo 有人点击静音了，就解除全员静音的高亮状态        view.selectAudioBtn(enableAudio)    }    fun judgeMuteVideoOrAudioForSomeone(isMuteVideo: Boolean, jsonObject: JSONObject) {        if (!isOwner()) {            val jsonArray = jsonObject.getJSONArray("users")            for (i in 0 until jsonArray.length()) {                val jsonObject1 = jsonArray.getJSONObject(i)                val userId = jsonObject1.getString(IMkey.USERID)                if (userId == getSelfUserId()) {                    if (isMuteVideo) {                        val muteVideo = jsonObject1.getBoolean(IMkey.MUTEVIDEO)                        muteLocalVideo(muteVideo)                    } else {                        val muteAudio = jsonObject1.getBoolean(IMkey.MUTEAUDIO)                        muteLocalAudio(muteAudio)                    }                }            }        }    }    override fun onTICRecvCustomMessage(fromUserId: String?, data: ByteArray?) {    }    override fun onTICRecvGroupCustomMessage(fromUserId: String?, data: ByteArray?) {    }    private var mOwnerUserId: String = ""    var isShare = false //显示分享屏幕    var isBroad = false //显示白板    override fun unitConfig() {        TXSdk.getInstance().share = false        if (mIsOwner!!) {            getTicManager().quitClassroom(true, null)        } else {            getTicManager().quitClassroom(false, null)        }        logoutClassRoom()        endRecord()        isBroad = false        if (isShare) {            stopScreenCapture()        }        view.resetBoardLayout()        view.stopTimer()        exitRoom()        view.skipCaller()    }    override fun destroyRoom() {        mMinBmp?.recycle()        if (isOwner()) {            getTicManager().sendGroupTextMessage(                setIMTextData(IMkey.END).toString(),                object : TICCallback<Any> {                    override fun onSuccess(data: Any) {                        TxLogUtils.i("txsdk---sendGroupTextMessage:onSuccess---${data}")                        unitConfig()                    }                    override fun onError(module: String?, errCode: Int, errMsg: String?) {                        TxLogUtils.i("txsdk---sendGroupTextMessage:onError------$errCode---$errMsg")                        unitConfig()                    }                })        } else {            unitConfig()        }    }    override fun endUser() {        SystemHttpRequest.getInstance()            .endUser(                getServiceId(),                getSelfUserId(),                object : HttpRequestClient.RequestHttpCallBack {                    override fun onSuccess(json: String?) {                    }                    override fun onFail(err: String?, code: Int) {                    }                })    }    override fun getOwnerUserId(): String = mOwnerUserId    override fun isOwner(): Boolean = mIsOwner    override fun getSelfUserId(): String = mRoomParamsBean!!.userId    override fun getRoomSoundStatus(): Boolean = mSoundStatus    override fun setRoomSoundStatus(isSoundStatus: Boolean) {        this.mSoundStatus = isSoundStatus    }    // 后台记录的白板显示状态    override fun getRoomShareStatus(): Boolean = mShareStatus    override fun setRoomShareStatus(isShareStatus: Boolean) {        this.mShareStatus = isShareStatus    }    override fun startShareWeb(        webId: String,        serviceId: String,        fromUserId: String,        toUserId: String,        fileName: String,        cookie: String    ) {        SystemHttpRequest.getInstance().startshareWeb(            webId,            serviceId,            fromUserId,            toUserId,            object : HttpRequestClient.RequestHttpCallBack {                override fun onSuccess(json: String?) {                    activity.runOnUiThread {                        val jsonObject = JSONObject(json)                        val clientUrl = jsonObject.getString("clientUrl")                        val agentUrl = jsonObject.getString("agentUrl")                        //发起文件共享                        sendGroupMessage(JSONObject().apply {                            put("serviceId", getServiceId())                            put("type", "wxShareWebFile")                            put("userId", toUserId)                            put("webId", webId)                            put("webUrl", clientUrl)                            put("fromId", getSelfUserId())                            put("fileName", fileName)                        }.toString(), "2")                        view.showWebDialog(                            agentUrl,                            toUserId,                            webId,                            true,                            fileName,                            toUserId,                            getSelfUserId(),                            cookie                        )                    }                }                override fun onFail(err: String?, code: Int) {                    activity.runOnUiThread {                        view.showMessage(err!!)                    }                }            }        )    }    override fun stopShareWeb(userId: String, webId: String, serviceId: String, isSelf: Boolean) {        SystemHttpRequest.getInstance().stopshareWeb(            userId,            webId,            serviceId,            object : HttpRequestClient.RequestHttpCallBack {                override fun onSuccess(json: String?) {                    activity.runOnUiThread {                        if (isSelf) {                            view.showMessage("您已结束产品共享")                        }                    }                }                override fun onFail(err: String?, code: Int) {                    activity.runOnUiThread {                        view.showMessage(err!!)                    }                }            }        )    }    override fun getPushWebUrl(        userId: String,        webId: String,        serviceId: String,        url: String,        name: String,        cookie: String    ) {        SystemHttpRequest.getInstance().pushshareWeb(            webId,            serviceId,            userId,            object : HttpRequestClient.RequestHttpCallBack {                override fun onSuccess(json: String?) {                    activity.runOnUiThread {                        val jsonObject = JSONObject(json)                        val clientUrl = jsonObject.optString("clientUrl")                        view.getPushWebUrlSuccess(webId, clientUrl, name, cookie)                    }                }                override fun onFail(err: String?, code: Int) {                    activity.runOnUiThread {                        view.showMessage(err!!)                    }                }            }        )    }    override fun getRoomInfo(webId: String?, url: String, name: String, fileName: String) {    }    override fun addShareUrl(id: String?, name: String, url: String, cookie: String) {        SystemHttpRequest.getInstance().addShareWebUrl(            id,            name,            url,            object : HttpRequestClient.RequestHttpCallBack {                override fun onSuccess(json: String?) {                    // result: { webId: xxx }                    activity.runOnUiThread {                        var webId = ""                        try {                            val jsonObject = JSONObject(json)                            webId = jsonObject.optString("webId")                        } catch (e: Exception) {                        }                        view.uploadWebUrlSuccess(webId, url, name, cookie)                    }                }                override fun onFail(err: String?, code: Int) {                    activity.runOnUiThread {                        view.showMessage(err!!)                    }                }            }        )    }    override fun deleteScreenFile(webId: String?) {        SystemHttpRequest.getInstance().deleteShareWebUrl(            webId,            TXSdk.getInstance().agent,            object : HttpRequestClient.RequestHttpCallBack {                override fun onSuccess(json: String?) {                    activity.runOnUiThread {                        view.showMessage("删除成功")                    }                }                override fun onFail(err: String?, code: Int) {                    activity.runOnUiThread {                        view.showMessage("删除失败")                    }                }            }        )    }    override fun setShareWebId(webId: String?) {        this.mShareWebId = webId!!    }    override fun getShareWebId(): String = mShareWebId    override fun recordAudio(serviceId: String, userId: String, agentId: String, type: String) {        SystemHttpRequest.getInstance().recordAudio(            serviceId,            userId,            userId,            type,            object : HttpRequestClient.RequestHttpCallBack {                override fun onSuccess(json: String?) {                    TxLogUtils.i(json)                    sendGroupMessage(                        setIMTextData(IMkey.startRecordFromHost)!!                            .put(                                IMkey.USERID,                                getAgentId()                            ).toString()                    )                }                override fun onFail(err: String?, code: Int) {                    TxLogUtils.i(err)                }            }        )    }    override fun endRecordAudio(serviceId: String) {        SystemHttpRequest.getInstance().endRecordAudio(            serviceId,            object : HttpRequestClient.RequestHttpCallBack {                override fun onSuccess(json: String?) {                    TxLogUtils.i(json)                    view.endRecordAudioSuccess()                }                override fun onFail(err: String?, code: Int) {                    TxLogUtils.i(err)                    view.endRecordAudioFail()                }            }        )    }}